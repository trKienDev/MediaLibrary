import appConfigs from "../../../config/app.config.js";
import { ServerFolders } from "../../../constants/folder.constant.js";
import { addHoverToScaleEffect } from "../../../utils/effects.utils.js";
import domsComponent from "../../dom.components.js";
import VideoArticle from "./video-article.class.js";

export default class ShortVideoArticle extends VideoArticle {
      constructor(short, options = {}) {
            // Merge options: cho ph√©p truy·ªÅn hoverToScale khi kh·ªüi t·∫°o
            super(short, {
                  folder: ServerFolders.SHORTS,
                  linkPrefix: "idol",
                  cssClass: "short-article",
                  showVideoInfor: false,
                  hoverToScale: options.hoverToScale ?? true, // üëà Cho ph√©p b·∫≠t/t·∫Øt
                  ...options
            });
      }

      async createVideoInfor() {
            return null;
      }

      async render() {
            const { video } = this;

            const article = domsComponent.createArticle({ cssClass: this.cssClass });
            const wrapper = domsComponent.createDiv({ cssClass: 'video-wrapper' });

            // üü¢ Kh√¥ng t·∫°o th·∫ª <a>, ch·ªâ t·∫°o player tr·ª±c ti·∫øp
            const videoPlayer = this.createVideoPlayer(video.name, video.file_path, this.folder);
            this.videoPlayer = videoPlayer.querySelector('video');

            // G·∫Øn tr·ª±c ti·∫øp video v√†o wrapper (thay v√¨ trong <a>)
            wrapper.appendChild(videoPlayer);

            // Kh√¥ng g·ªçi createVideoInfor v√¨ short kh√¥ng c·∫ßn hi·ªÉn th·ªã th√¥ng tin
            article.appendChild(wrapper);

            // √Åp d·ª•ng hi·ªáu ·ª©ng hoverToScale n·∫øu c√≥
            if (this.hoverToScale) {
                  addHoverToScaleEffect(article);
            }

            this.articleElement = article;

            // C√≥ th·ªÉ b·ªè attachHoverEvents v√¨ kh√¥ng c√≥ ahref n·ªØa
            this.attachHoverEvents();

            return article;
      }


      createVideoPlayer(name, filePath, folder) {
            // G·ªçi l·∫°i logic g·ªëc t·ª´ VideoArticle
            const wrapper = super.createVideoPlayer(name, filePath, folder);

            // L·∫•y ph·∫ßn t·ª≠ video b√™n trong wrapper
            const videoPlayer = wrapper.querySelector('video');

            // Th√™m thu·ªôc t√≠nh data-lightbox-src ƒë·ªÉ ImageLightbox c√≥ th·ªÉ d√πng
            videoPlayer.setAttribute('data-lightbox-src', `${appConfigs.SERVER}/${folder}/${filePath}`);
            videoPlayer.setAttribute('link', `/${this.linkPrefix}/${this.video.idol_id}`);

            videoPlayer.addEventListener('mouseenter', this.handleMouseEnter);
            videoPlayer.addEventListener('mouseleave', this.handleMouseLeave);

            // (tu·ª≥ ch·ªçn) c√≥ th·ªÉ th√™m thu·ªôc t√≠nh kh√°c n·∫øu c·∫ßn
            // videoPlayer.setAttribute('data-type', 'short-video');

            return wrapper;
      }

      handleMouseEnter() {
            if(this.videoPlayer) {
                  this.playTimeout = setTimeout(() => {
                        this.videoPlayer.play().catch((error) => {
                              if(error.name !== 'AbortError') {
                                    console.warn('Video play failed: ', error);
                              }
                        }, 200);
                  });
            }
      }
      handleMouseLeave() {
            clearTimeout(this.playTimeout);
            if(this.videoPlayer) {
                  this.videoPlayer.pause();
            }
      }
}