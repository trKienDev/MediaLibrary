import { toastNotifier } from "../../../app.main";
import NOTIFICATION_TYPES from "../../../constants/notification-types.constant";

(async function() {
      alert('hello');
})();

const renderSrategies = {
      // 'videos': (section, parent) => ...
}
class HomepageFeedsLoader {
      // 1. D·ªØ li·ªáu (state) ƒë∆∞·ª£c ƒë√≥ng g√≥i b√™n trong
      #loaderElement;
      #observer;
      #sectionPages = { /* ... */ };
      #isLoading = false;
      #homepageSectionTypes = [ /* ... */ ];
      #sessionSeed;
      #apiEndpoint;
      #parentElement;

      // 2. Constructor nh·∫≠n c√°c dependency t·ª´ b√™n ngo√†i
      constructor(loaderSelector, parentSelector, sectionTypes, apiEndpoint) {
            this.#loaderElement = document.querySelector(loaderSelector);
            this.#parentElement = document.querySelector(parentSelector);
            this.#homepageSectionTypes = sectionTypes;
            this.#apiEndpoint = apiEndpoint;

            if(!this.#loaderElement || !this.#parentElement) {
                  toastNotifier.show("Loader or parent element not found!", NOTIFICATION_TYPES.ERROR);
                  throw new Error("Loader or parent element not found!");
            }
      }

      // 3. C√°c h√†m to√†n c·ª•c tr·ªü th√†nh ph∆∞∆°ng th·ª©c c·ªßa class
      // Ph∆∞∆°ng th·ª©c n√†y kh·ªüi t·∫°o to√†n b·ªô logic
      initialize() {
            if(!this.#loaderElement) return;
            this.#sessionSeed = this.#createSeed();

            this.#observer = new IntersectionObserver(entries => {
                  if(entries[0].isIntersecting) {
                        this.fe
                  }
            });
      }

      async fetchNextBatch() {
            // 1. Ki·ªÉm tra xem c√≥ ƒëang trong qu√° tr√¨nh t·∫£i kh√°c kh√¥ng. N·∫øu c√≥, tho√°t ngay.
            if(this.#isLoading) return;

            // 2. Ki·ªÉm tra xem c√≤n lo·∫°i n·ªôi dung n√†o ƒë·ªÉ th·ª≠ kh√¥ng.
            if(this.#homepageSectionTypes.length === 0) {
                  this.#loaderElement.innerHTML = "B·∫°n ƒë√£ xem h·∫øt n·ªôi dung! üéâ";
                  this.#loaderElement.style.display = 'block';
                  // ng·∫Øt observer ƒë·ªÉ ko g·ªçi l·∫°i h√†m n√†y n·ªØa
                  if(this.#observer) {
                        this.#observer.disconnect();
                  }
                  return;
            }

            // 3. ƒê√°nh d·∫•u l√† "ƒëang t·∫£i" & hi·ªÉn th·ªã icon loading
            this.#isLoading = true;
            this.#loaderElement.style.display = 'block';

            let hasMoreContent = false;
            let sectionToRender = null;

            // 4. V√≤ng l·∫∑p ƒë·ªÉ t√¨m ki·∫øm n·ªôi dung
            // V√≤ng l·∫∑p s·∫Ω ti·∫øp t·ª•c cho ƒë·∫øn khi t√¨m th·∫•y n·ªôi dung HO·∫∂C h·∫øt c√°c lo·∫°i section ƒë·ªÉ th·ª≠.
            while(!hasMoreContent && this.#homepageSectionTypes.length > 0) {
                  const typeToFetch = this.#homepageSectionTypes[0];
                  const nextPage = this.#sectionPages[typeToFetch] || 1;

                  // S·ª≠ d·ª•ng c√°c thu·ªôc t√≠nh c·ªßa l·ªõp ƒë√£ ƒë∆∞·ª£c truy·ªÅn v√†o qua constructor.
                  const apiUrl = `${this.#apiEndpoint}?type=${typeToFetch}&page=${nextPage}&seed=${this.#sessionSeed}`;

                  try {
                        const response = await fetch(apiUrl);
                        if(!response.ok) {
                              const errorMessage = await response.json();
                              throw new Error(errorMessage);
                        }

                        const newContent = await response.json();

                        // 5, X·ª≠ l√Ω k·∫øt qu·∫£ tr·∫£ v·ªÅ
                        if(newContent.data && newContent.data.length > 0) {
                              // A. N·∫øu c√≥ d·ªØ li·ªáu
                              sectionToRender = {
                                    type: typeToFetch,
                                    title: typeToFetch,
                                    data: newContent.data
                              };
                              hasMoreContent = true; // ƒê√°nh d·∫•u ƒë√£ t√¨m th·∫•y, ƒë·ªÉ tho√°t v√≤ng l·∫∑p.

                              this.#sectionPages[typeToFetch]++;

                              const usedType = this.#homepageSectionTypes.shift();
                              this.#homepageSectionTypes.push(usedType);
                        } else {
                              // B. N·∫øu ko c√≥ d·ªØ li·ªáu --> lo·∫°i b·ªè kh·ªèi danh s√°ch xoay v√≤ng
                              this.#homepageSectionTypes.shift();
                        }
                  } catch(error) {
                        toastNotifier.show("Error while batching homepage feeds", NOTIFICATION_TYPES.ERROR);
                        console.error("Error while batching homepage feed: ", error);
                        break;
                  }
            }

            // 6. Render n·ªôi dung n·∫øu ƒë√£ t√¨m th·∫•y
            if(sectionToRender) {
                  await this.renderSections([sectionToRender]);
            }

            // 7. ƒê√°nh d·∫•u ƒë√£ t·∫£i xong
            this.#isLoading = false;
      }

      async renderSections(sections) {
            for(const section of sections) {
                  const renderFunction = renderSrategies[section.type];
                  if(renderFunction) {
                        await renderFunction(section, this.#parentElement);
                  } else {
                        toastNotifier.show('No render strategy found', NOTIFICATION_TYPES.WARNING);
                        console.warn(`No render strategy found for type: ${section.type}`);
                  }
            }
      }

      #createSeed() {
            return Math.random().toString(36).substring(2);
      }
}


const feedsLoader = new HomepageFeedsLoader(
      '#homepage-feeds-loader',
      '#homepage-feeds-content',
      ['creators', 'videos', 'films'],
      // api_user
);
feedsLoader.initialize();

async function RenderVideosSection(section, homepageFeedsContent) {
      const section_container = doms_component.createDiv('section-content_container');
      const videos_wrapper = doms_component.createDiv('section-videos_wrapper');
      videos_wrapper.id = 'videos-pagination_section';
     
      // T·∫°o 1 m·∫£ng c√°c promise
      const article_promises = section.data.map(video => 
            videos_component.CreateVideoArticle(video)
      );
      // Ch·ªù cho T·∫§T C·∫¢ c√°c promise ho√†n th√†nh
      const video_articles = await Promise.all(article_promises);     
      videos_wrapper.append(...video_articles);
      section_container.appendChild(videos_wrapper);
      homepageFeedsContent.appendChild(section_container);  
}